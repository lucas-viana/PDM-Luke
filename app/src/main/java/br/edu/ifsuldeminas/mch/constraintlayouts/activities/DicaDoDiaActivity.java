package br.edu.ifsuldeminas.mch.constraintlayouts.activities;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import com.google.android.material.button.MaterialButton;

import java.util.Random;

import br.edu.ifsuldeminas.mch.constraintlayouts.R;

public class DicaDoDiaActivity extends AppCompatActivity {

    private static final String TAG = "DicaDoDiaActivity";
    
    private TextView textViewDica;
    private TextView textViewAutor;
    private MaterialButton buttonNovaDica;
    private ProgressBar progressBar;
    
    // Array de dicas motivacionais est√°ticas
    private final String[] DICAS_MOTIVACIONAIS = {
        "Cada pequeno passo √© uma grande conquista! üåü",
        "Voc√™ √© √∫nico e especial do seu pr√≥prio jeito! üí´",
        "A rotina traz seguran√ßa e tranquilidade. üìÖ",
        "Est√° tudo bem sentir emo√ß√µes diferentes. üíô",
        "Seus interesses especiais s√£o tesouros valiosos! üíé",
        "Voc√™ tem o direito de ser compreendido e respeitado. ü§ù",
        "Pequenas vit√≥rias merecem grandes celebra√ß√µes! üéâ",
        "Sua perspectiva √∫nica torna o mundo mais rico. üåà",
        "√â normal precisar de tempo para processar as coisas. ‚è∞",
        "Voc√™ merece paci√™ncia, carinho e compreens√£o. ‚ù§Ô∏è",
        "Sua sensibilidade √© uma for√ßa, n√£o uma fraqueza. üí™",
        "Cada dia √© uma nova oportunidade de aprender. üìö",
        "Voc√™ tem o direito de expressar suas necessidades. üó£Ô∏è",
        "Suas habilidades especiais fazem diferen√ßa no mundo. ‚≠ê",
        "√â importante respeitar seus pr√≥prios limites. üõ°Ô∏è",
        "Voc√™ √© capaz de coisas incr√≠veis! üöÄ",
        "Sua criatividade n√£o tem limites. üé®",
        "Pequenos momentos de felicidade s√£o preciosos. ‚òÄÔ∏è",
        "Voc√™ tem o direito de ser aceito como √©. üè†",
        "Sua determina√ß√£o √© inspiradora. üèÜ",
        "√â normal precisar de pausas e descanso. üòå",
        "Voc√™ traz alegria especial para quem te conhece. üòä",
        "Suas conquistas di√°rias s√£o motivo de orgulho. üå±",
        "Voc√™ tem um cora√ß√£o cheio de amor para dar. üíù",
        "Sua presen√ßa faz diferen√ßa na vida das pessoas. üå∫",
        "√â importante celebrar quem voc√™ √©! üéä",
        "Voc√™ √© forte, corajoso e resiliente. ü¶ã",
        "Sua curiosidade √© um dom especial. üîç",
        "Cada desafio superado te torna mais forte. üí™",
        "Voc√™ merece todo o amor e apoio do mundo. üåç"
    };
    
    private final String[] AUTORES = {
        "Equipe Luke",
        "Luke - Seu Assistente",
        "Comunidade Inclusiva",
        "Amigos do Luke",
        "Fam√≠lia Luke",
        "Apoio Especializado",
        "Educa√ß√£o Inclusiva",
        "Rede de Apoio"
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dica_do_dia);

        inicializarComponentes();
        configurarToolbar();
        carregarDicaDoDia();
    }

    private void inicializarComponentes() {
        textViewDica = findViewById(R.id.textViewDica);
        textViewAutor = findViewById(R.id.textViewAutor);
        buttonNovaDica = findViewById(R.id.buttonNovaDica);
        progressBar = findViewById(R.id.progressBar);

        buttonNovaDica.setOnClickListener(v -> {
            // Carregar nova dica aleat√≥ria
            carregarDicaDoDia();
        });
    }

    private void configurarToolbar() {
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        }
    }

    private void carregarDicaDoDia() {
        // Mostrar loading brevemente para feedback visual
        mostrarLoading(true);
        
        // Gerar dica aleat√≥ria
        Random random = new Random();
        int indiceDica = random.nextInt(DICAS_MOTIVACIONAIS.length);
        int indiceAutor = random.nextInt(AUTORES.length);
        
        String dicaSelecionada = DICAS_MOTIVACIONAIS[indiceDica];
        String autorSelecionado = AUTORES[indiceAutor];
        
        // Simular pequeno delay para feedback visual
        textViewDica.postDelayed(() -> {
            mostrarLoading(false);
            exibirDica(dicaSelecionada, autorSelecionado);
        }, 300); // 300ms para feedback visual suave
        
        Log.d(TAG, "Nova dica carregada: " + dicaSelecionada);
    }

    private void exibirDica(String texto, String autor) {
        textViewDica.setText(texto);
        textViewAutor.setText("- " + autor);
        
        // Anima√ß√£o sutil para feedback visual
        textViewDica.setAlpha(0f);
        textViewAutor.setAlpha(0f);
        
        textViewDica.animate()
                .alpha(1f)
                .setDuration(500)
                .start();
                
        textViewAutor.animate()
                .alpha(1f)
                .setDuration(500)
                .setStartDelay(200)
                .start();
    }

    private void mostrarLoading(boolean mostrar) {
        if (mostrar) {
            progressBar.setVisibility(View.VISIBLE);
            buttonNovaDica.setEnabled(false);
        } else {
            progressBar.setVisibility(View.GONE);
            buttonNovaDica.setEnabled(true);
        }
    }

    @Override
    public boolean onSupportNavigateUp() {
        getOnBackPressedDispatcher().onBackPressed();
        return true;
    }
}
